require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const contactRouter = require('./routes/contact');

const app = express();
app.use(express.json());

// ‚úÖ Allowed origins
const allowedOrigins = [
  "http://localhost:5173",                 // local dev
  "https://future-interns-task1.vercel.app", // deployed frontend
  "https://futureinterns-task1.vercel.app"    // without dash
];

// ‚úÖ Single CORS middleware (handles preflight OPTIONS too)
app.use(
  cors({
    origin: (origin, callback) => {
      if (!origin || allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        console.error("‚ùå Blocked by CORS:", origin);
        callback(new Error("Not allowed by CORS"));
      }
    },
    methods: ["GET", "POST", "OPTIONS"], // üëà allow preflight & POST
    allowedHeaders: ["Content-Type"],    // üëà allow JSON requests
    credentials: true,
  })
);

// ‚úÖ Routes
app.use('/api/contact', contactRouter);

// ‚úÖ Root route
app.get('/', (req, res) => {
  res.send('Backend is running üöÄ');
});

// ‚úÖ Catch-all
app.use((req, res) => {
  res.status(404).json({ error: 'Not found' });
});

// ‚úÖ Connect DB & Start server
const PORT = process.env.PORT || 5000;
mongoose.connect(process.env.MONGODB_URI)
  .then(() => {
    console.log("‚úÖ MongoDB connected");
    app.listen(PORT, () => console.log(`‚ö° Server running on port ${PORT}`));
  })
  .catch((err) => {
    console.error("‚ùå MongoDB connection error:", err);
    process.exit(1);
  });
